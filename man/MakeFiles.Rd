% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions.R
\name{makeFiles}
\alias{makeFiles}
\title{Make new parameter files}
\usage{
makeFiles(lstFiles, base_path, param_path, xmls_path)
}
\arguments{
\item{lstFiles}{The text file \code{\link[=character]{character()}}or \code{\link[=dataframe]{dataframe()}} that contains all the file names to update and be}

\item{base_path}{\code{\link[=character]{character()}} the file path to the base parameter file(s) location}

\item{param_path}{\code{\link[=character]{character()}} the file path to the parameter value file(s) location}

\item{xmls_path}{\code{\link[=character]{character()}} the file path to the new output parameter file(s) location}
}
\value{
This function will generate new .xml files in the \code{\link[=xmls_path]{xmls_path()}} directory
}
\description{
\code{makeFiles()} takes a base parameter file and replaces specific
parameter values to generate new parameter files to be run in SORTIE.
}
\details{
Common use of this function would be to change the number of timesteps or initiate different
starting stands to create a series of parameter files for an experiment

There are many different types of parameter values that can be updated.
The \code{\link[=VariableNames]{VariableNames()}} file is then essential to ensure the parameter name that is defined in the R environment
can be found in the base parameter file to replace the correct value. This csv file must be setup correctly
with the following columns:#'
col 1: input parameter name defined
col 2: type
col 3: name in the line being replaced in the base parameter file
col 4: group name

Column 2 defines the type of parameter to be replaced and these are the valid values:
1 = basic case: variable parameter is directly after the name
2 = basic case with species: same, but with a species name after it
3 = behaviorlist type: but basic parameter - similar to 1
4 = behaviorlist type: but with species - similar to 2
5 = output files: so parameter file will have a directory name
6 = groups with species on the previous line, e.g. for initial density
}
\examples{
a <- data.frame("type"=c(0,1,1), "name"=c("a1.csv","a2.csv","a3.csv"))
makeFiles(lstFiles=a, base_path=".", param_path=".", xmls_path=".")
}
