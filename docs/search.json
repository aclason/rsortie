[{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://aclason.github.io/rsortie/articles/edit_inputs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to edit and prepare rsortie input files","text":"vignette : Create one new files contain updated information based user-provided parameters xml code","code":""},{"path":"https://aclason.github.io/rsortie/articles/edit_inputs.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"How to edit and prepare rsortie input files","text":"edit SORTIE xml file, must provide tool set information base file, parameters code changing, information combine input make different files. minimum four files must present run model. Files.txt: file contains list files wish use. six different slots allowed file, minimum two types required. Base xml file input xml file contains necessary parameters, behaviours, structures. file must contain possible examples variables behaviours modified files. can one file types. Details formats files . code loop combinations files. resulting xml files named combination names present: type0-type1-type2.xml. Example: type, name 0, Test.xml 1, t1.csv 2, f2.xml 2, g2.csv 3, p3.csv 3, r3.csv resulting output files named: test-t1-f2-p3.xml, test-t1-f2-r3.xml, test-t1-g2-p3.xml, test-t1-g2-r3.xml. VariableNames.csv: translation file matches parameter names input file xml file, tells general format variable. Formats described later. file changed add new variables change parameter name variable. File format: Parameter name, variable type, xml variable name, group name (applicable) variable names completely case space sensitive; code looking exact matches. example, use Timesteps TimeSteps timesteps Time steps. parameter names parameter value file can specific user, must parameter value files listed Files.txt. Base Xml file: (type 0) file standard SORTIE input parameter file, modifications required. important file contains variables sections modified. example, might adding xml code new harvest rules, harvest section must original SORTIE file. Similarly, changing initial densities, size class might want use original file. Parameter value files: two types parameter value files: csv xml, described . cases, variables updated xml file order parameter value file, order slot parameter value files. Parameter value files read top bottom, file slots addressed 1 3. , variable slot 3 supersede one slot 1 file. useful wish, example, replace xml section (e.g. slot 2 file), change one parameters (e.g., slot 3 file). 4.1 CSV files files contain set new values different parameters. first line must blank column species names xml file. variable names critical species names exactly xml file code searches exact match. second line must either “na” name BehaviourList parameters following apply. BehavoiurList name comes original xml file, requires knowledge xml file naming. However, necessary give list name multiple behavior lists set parameter names. parameters behavior list finished, need mark start new section either new BehaviourList “na”. parameter species, code looks parameter corresponding column. parameter species specific (e.g. timestep), first column used. Values can columns, just ignored. code create output file names new xml file. Parameter value file include directory output placed. format must include final “” look something like: Output,C:\\Projects\\SORTIE\\test\\ ShortOutput,C:\\Projects\\SORTIE\\test\\ file name combination original xml filename parameter value file name, filename used final xml file. Note file extension Output file _det.gz.tar ShortOutput fill ..variables present xml file csv file, creating multiple files, run risk overwriting output run SORTIE. 4.2 XML files second type parameter value file allows replacement deletion xml code. tool replace existing lines text new lines text file delete section code. file must contain complete xml format code. New behavior: file can contain completely new set behaviours parameters, allometry GapDispersal21. tool look first line file, determine look , replace lines beginning end section new code. example, use completely replace allometry section input file. Delete xml section: Put name section wish delete first line xml file (e.g. StochasticMortality9). second line file must contain -999. tool find section corresponds first line file, remove entirely final xml file. example: <StochasticMortality9> <delete>-999<\/delete> <\/StochasticMortality9> tool search xml file replacing one section time, order. number xml sections can present file, file can include sections delete sections replace.","code":""},{"path":"https://aclason.github.io/rsortie/articles/edit_inputs.html","id":"editing-the-variablenames-file","dir":"Articles","previous_headings":"","what":"Editing the VariableNames file","title":"How to edit and prepare rsortie input files","text":"VariableNames.csv file critical success code using new values defined csv-format parameter value files. VariableNames file contains two important pieces information: mapping parameter name input parameter value file corresponding xml variable name, type variable xml file. must familiar SORTIE xml file format file contains names code using identify change. xml file contains many different formats variables. simple formats variable value line. include species, grouped. Type column VariableNames file critical identify format variable thus rules code finding replacing right variable. far, 7 different formats identified coded. current version VariableNames file exhaustive. contains variables used testing files. However, new variables fit one 7 currently defined types able added code run. Variable Types: Blue text example xml file (SORTIE-generated file). Green text example VariableNames file purple text example parameter value file (csv file). Type 1: parameter line directly variable name:<timesteps>20<\/timesteps>Timesteps,1,timesteps,Timesteps,66,66,66,66","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/articles/extract_outputs.html","id":"extracting-output-files","dir":"Articles","previous_headings":"","what":"Extracting output files","title":"How to extract rsortie outputs","text":"possible automatically extract output files one SORTIE runs. program look directory: C:/Projects/SORTIE/output/ loop tar files directory extract directory: C:/Projects/SORTIE/output/extracted rudimentary function point. always open tarfiles output directory, overwrite files extracted directory. functionality forthcoming function returns list xml files extracted directory.","code":""},{"path":"https://aclason.github.io/rsortie/articles/extract_outputs.html","id":"read-tree-output-files","dir":"Articles","previous_headings":"","what":"Read tree output files","title":"How to extract rsortie outputs","text":"function ParseXML allows users read one years one xml file. Inputs function include list one xml files, well list one years extract. Put list xml files variable “ListOfExtractedFile”. Note variable can also filled automatically using ExtractFiles function described previous section. Put list years extract variable “YearsToExtract” code run set files years read tree list file put resulting information R variable: trees_# # loop number. Right now correspondence loop number file-year combination. new variable columns Sortie printed output file, including one called ID. Note ID simply represents place output file tree record contained. ID may refer tree timesteps, mortality establishment tree record trees change id. Use x-y location track trees instead remain constant life tree.","code":""},{"path":"https://aclason.github.io/rsortie/articles/extract_outputs.html","id":"read-map-output-files","dir":"Articles","previous_headings":"","what":"Read map output files","title":"How to extract rsortie outputs","text":"function ParseMap allows users read maps output xml file. function, manually assign name output file read. code scan file find maps present, loop map file, extract information, assign two different R variables. grid information stored R variable called: map_# # location output file. type map stored variable called: output_type_# # location output file. type map read output file something like “Dispersed Seeds” “GLI Map 1”.","code":""},{"path":"https://aclason.github.io/rsortie/articles/extract_outputs.html","id":"read-raster-files","dir":"Articles","previous_headings":"","what":"Read raster files","title":"How to extract rsortie outputs","text":"stand-alone file “RasterFunctions.r” read raster file write information text file. simple file whose goal allow users quickly change raster file format can pulled xml chunk added Sortie file. Input: raster file name Output: text file xml format. cell value greater 0 printed : <ha_applyToCell x=”xloc” y=“yloc’/> xloc yloc x-y locations raster file.","code":""},{"path":"https://aclason.github.io/rsortie/articles/use_rsortie.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to use the rsortie package","text":"vignette provides overview use rSORTIE package. vignettes go specific actions functions within rSORTIE package. goal rSORTIE package make SORTIE-ND model widely accessible wider audience. Operating SORTIE-ND model R allows continuous workflow, transparent reproducible research, clear documentation. SORTIE-ND individual tree, spatially explicit model forest dynamics. model tracks individuals time, trees modelled individually, individual location space model operates real space, location individual affects processes (birth, growth, death), resource-dependent","code":""},{"path":"https://aclason.github.io/rsortie/articles/use_rsortie.html","id":"step-1-set-global-parameters-and-import-data","dir":"Articles","previous_headings":"","what":"Step 1: Set global parameters and import data","title":"How to use the rsortie package","text":"can walk chunks code","code":""},{"path":[]},{"path":[]},{"path":"https://aclason.github.io/rsortie/articles/use_rsortie.html","id":"step-4-add-treatments","dir":"Articles","previous_headings":"","what":"Step 4: Add treatments","title":"How to use the rsortie package","text":"See vignettes","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/articles/use_rsortie.html","id":"step-6-extract-and-parse-output-files","dir":"Articles","previous_headings":"","what":"Step 6: Extract and Parse output files","title":"How to use the rsortie package","text":"See vignettes","code":""},{"path":"https://aclason.github.io/rsortie/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sarah Beukema. Author. Alana Clason. Author, maintainer.","code":""},{"path":"https://aclason.github.io/rsortie/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beukema S, Clason (2022). rsortie: Forest stand dynamics modelling via SORTIE-ND. https://aclason.github.io/rsortie, https://github.com/aclason/rsortie.","code":"@Manual{,   title = {rsortie: Forest stand dynamics modelling via SORTIE-ND},   author = {Sarah Beukema and Alana Clason},   year = {2022},   note = {https://aclason.github.io/rsortie, https://github.com/aclason/rsortie}, }"},{"path":[]},{"path":"https://aclason.github.io/rsortie/index.html","id":"forest-stand-neighbourhood-dynamics-model","dir":"","previous_headings":"","what":"Forest Stand Neighbourhood Dynamics Model","title":"Forest stand dynamics modelling via SORTIE-ND","text":"R package facilitates use SORTIE-ND, C++ model, R. rsortie allows user modify input files, run simulations, process output files forest stand dynamics model. assume user familiar program R, can downloaded web http://www.cran.r-project.org/. user must also download familiar SORTIE-ND, learn download SORTIE-ND GUI, please visit http://www.sortie-nd.org/. questions regarding code directed alana.clason@bvcentre.ca sortie@bvcentre.ca","code":""},{"path":"https://aclason.github.io/rsortie/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Forest stand dynamics modelling via SORTIE-ND","text":"1. Install SORTIE-ND GUI. Go http://www.sortie-nd.org/software/index.html download newest version. 2. Set value JAVA-HOME environment variable (Optional) cases, SORTIE GUI know locate Java even though installed user’s system. fix issue Windows 10 computer: Search Environment Variables select Edit system Environment Variables. Click Environment Variables near bottom right. System Variables, click New. Set Variable Name JAVA_HOME. Set Variable Value C:\\filepath\\location\\\\java.exe Click OK close Environment Variables editor. Open Command Prompt (Run administrator). Run: Verify Environment Variable added correctly restarting Command Prompt running: see file path location java.exe 3. Install rsortie, R.","code":"setx -m JAVA_HOME \"C:\\filepath\\location\\of\\java.exe\" echo %JAVA_HOME% devtools::install_github(\"aclason/rsortie\")"},{"path":"https://aclason.github.io/rsortie/index.html","id":"file-and-folder-descriptions","dir":"","previous_headings":"","what":"File and Folder descriptions","title":"Forest stand dynamics modelling via SORTIE-ND","text":"(maybe don’t need ’s vignette) 1. Inputs input files default files used run model, can changed arguments package. Files.txt (e.g., “InitDateCreek.csv”) files contain list files wish use simulation. Base XML file (e.g., “ICH.xml”) files standard SORTIE input parameter file, modifications required. important file contains variables sections modified. example, might adding XML code new harvest rules, harvest section must original SORTIE file. Similarly, changing initial densities, size class might want use original file. Parameter Values File (e.g., “A1.csv”) files contain set new values different parameters. Variable Names (e.g., “VariableNames.csv”) translation file matches parameter names input file XML file tells general format variable. Formats described later. file changed add new variables change parameter name variable. information edit files please refer https://bvcentre.ca/sortie-nd. 2. R MakeFiles.R R script contains code needed run simulation. Functions.R R script contains functions … ParseXML.R R script contains functions parse… ReplaceInfo.R R script contains functions replace base XML parameter values wish use. SORTIE-HelperFunctions.R R script contains functions …","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://aclason.github.io/rsortie/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://aclason.github.io/rsortie/reference/ExtractFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract output files — ExtractFiles","title":"Extract output files — ExtractFiles","text":"ExtractFiles() reads directory extract files .gz.tar files present. also assumes files single .gz.tar file directory. looks first file .gz.tar, determines many subdirectories present, strips subdirectories. extracted files placed new extracted directory. want put somewhere else, change variable extractDir","code":""},{"path":"https://aclason.github.io/rsortie/reference/ExtractFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract output files — ExtractFiles","text":"","code":"ExtractFiles(itype, exname, onename, extime)"},{"path":"https://aclason.github.io/rsortie/reference/ExtractFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract output files — ExtractFiles","text":"itype double() '1' = extract given file, otherwise extract files directory exname character() directory contains tar file(s) extracted onename character() single tar file extract (used itype = 1) extime double() Extract time?","code":""},{"path":"https://aclason.github.io/rsortie/reference/ExtractFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract output files — ExtractFiles","text":"routine returns list extracted files.","code":""},{"path":"https://aclason.github.io/rsortie/reference/ExtractFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract output files — ExtractFiles","text":"","code":"ExtractFiles(itype,exname,onename,extime) #> Error in ExtractFiles(itype, exname, onename, extime): object 'exname' not found"},{"path":"https://aclason.github.io/rsortie/reference/FindFileLine.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a file line — FindFileLine","title":"Find a file line — FindFileLine","text":"FindFileLine() finds line within base parameter file modified.","code":""},{"path":"https://aclason.github.io/rsortie/reference/FindFileLine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a file line — FindFileLine","text":"","code":"FindFileLine(rf, itype, varname, vargroup, varmaster)"},{"path":"https://aclason.github.io/rsortie/reference/FindFileLine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a file line — FindFileLine","text":"rf character() Base XML parameter file modified itype integer() File type varname character() variable codename vargroup character() variable group name varmaster character() variable master group","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/reference/FindFileLine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a file line — FindFileLine","text":"","code":"FindFileLine(rf,itype,codename, groupname, mastergroup) #> Error in FindFileLine(rf, itype, codename, groupname, mastergroup): object 'itype' not found"},{"path":"https://aclason.github.io/rsortie/reference/MakeFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Make new parameter files — makeFiles","title":"Make new parameter files — makeFiles","text":"makeFiles() takes base parameter file replaces specific parameter values generate new parameter files run SORTIE.","code":""},{"path":"https://aclason.github.io/rsortie/reference/MakeFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make new parameter files — makeFiles","text":"","code":"makeFiles(lstFiles, base_path, param_path, xmls_path)"},{"path":"https://aclason.github.io/rsortie/reference/MakeFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make new parameter files — makeFiles","text":"lstFiles text file character()dataframe() contains file names update base_path character() file path base parameter file(s) location param_path character() file path parameter value file(s) location xmls_path character() file path new output parameter file(s) location","code":""},{"path":"https://aclason.github.io/rsortie/reference/MakeFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make new parameter files — makeFiles","text":"function generate new .xml files xmls_path() directory","code":""},{"path":"https://aclason.github.io/rsortie/reference/MakeFiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make new parameter files — makeFiles","text":"Common use function change number timesteps initiate different starting stands create series parameter files experiment many different types parameter values can updated. VariableNames() file essential ensure parameter name defined R environment can found base parameter file replace correct value. csv file must setup correctly following columns:#' col 1: input parameter name defined col 2: type col 3: name line replaced base parameter file col 4: group name Column 2 defines type parameter replaced valid values: 1 = basic case: variable parameter directly name 2 = basic case species: , species name 3 = behaviorlist type: basic parameter - similar 1 4 = behaviorlist type: species - similar 2 5 = output files: parameter file directory name 6 = groups species previous line, e.g. initial density","code":""},{"path":"https://aclason.github.io/rsortie/reference/MakeFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make new parameter files — makeFiles","text":"","code":"a <- data.frame(\"type\"=c(0,1,1), \"name\"=c(\"a1.csv\",\"a2.csv\",\"a3.csv\")) makeFiles(lstFiles=a, base_path=\".\", param_path=\".\", xmls_path=\".\") #> Error in makeFiles(lstFiles = a, base_path = \".\", param_path = \".\", xmls_path = \".\"): unused argument (lstFiles = a)"},{"path":"https://aclason.github.io/rsortie/reference/ModifyFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a parameter file — ModifyFile","title":"Modify a parameter file — ModifyFile","text":"ModifyFile() replaces base parameter file new, updated values.","code":""},{"path":"https://aclason.github.io/rsortie/reference/ModifyFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a parameter file — ModifyFile","text":"","code":"ModifyFile(paramFile, xml1)"},{"path":"https://aclason.github.io/rsortie/reference/ModifyFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify a parameter file — ModifyFile","text":"paramFile character() Parameter file new values xml1 character() Base XML parameter file modified","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/reference/ModifyFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify a parameter file — ModifyFile","text":"","code":"ModifyFile(\"./Inputs/ParameterValues/D3.csv\",xml1) #> Warning: cannot open file './Inputs/ParameterValues/D3.csv': No such file or directory #> Error in file(con, \"r\"): cannot open the connection"},{"path":"https://aclason.github.io/rsortie/reference/ParseMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse spatial files — ParseMap","title":"Parse spatial files — ParseMap","text":"ParseMap() takes output XML file name returns file sprd.","code":""},{"path":"https://aclason.github.io/rsortie/reference/ParseMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse spatial files — ParseMap","text":"","code":"ParseMap(grid_data)"},{"path":"https://aclason.github.io/rsortie/reference/ParseMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse spatial files — ParseMap","text":"grid_data character() Grid data","code":""},{"path":"https://aclason.github.io/rsortie/reference/ParseMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse spatial files — ParseMap","text":"file sprd.","code":""},{"path":"https://aclason.github.io/rsortie/reference/ParseMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse spatial files — ParseMap","text":"","code":"ParseMap(grid_data) #> Error in xml_children(xml_find_all(grid_data, \".//ma_intCodes\")): could not find function \"xml_children\""},{"path":"https://aclason.github.io/rsortie/reference/ParseXML.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse output data frame — ParseXML","title":"Parse output data frame — ParseXML","text":"ParseXML() takes SORTIE output XML file name returns file output data frame","code":""},{"path":"https://aclason.github.io/rsortie/reference/ParseXML.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse output data frame — ParseXML","text":"","code":"ParseXML(xmlname)"},{"path":"https://aclason.github.io/rsortie/reference/ParseXML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse output data frame — ParseXML","text":"xmlname character() XML file name","code":""},{"path":"https://aclason.github.io/rsortie/reference/ParseXML.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse output data frame — ParseXML","text":"file output data frame.","code":""},{"path":"https://aclason.github.io/rsortie/reference/ParseXML.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse output data frame — ParseXML","text":"","code":"ParseXML(xmlname) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #> Error in read_xml(xmlname): object 'xmlname' not found"},{"path":"https://aclason.github.io/rsortie/reference/PrepareFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a file to be updated — PrepareFile","title":"Prepare a file to be updated — PrepareFile","text":"PrepareFile() prepares new parameter file ModifyFile()","code":""},{"path":"https://aclason.github.io/rsortie/reference/PrepareFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a file to be updated — PrepareFile","text":"","code":"PrepareFile(pfname)"},{"path":"https://aclason.github.io/rsortie/reference/PrepareFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a file to be updated — PrepareFile","text":"pfname character() File path name parameter file new values","code":""},{"path":"https://aclason.github.io/rsortie/reference/PrepareFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a file to be updated — PrepareFile","text":"pf1","code":""},{"path":"https://aclason.github.io/rsortie/reference/PrepareFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a file to be updated — PrepareFile","text":"","code":"PrepareFile(paramFile) #> Error in readLines(as.character(pfname)): object 'paramFile' not found"},{"path":"https://aclason.github.io/rsortie/reference/PrepInputs.html","id":null,"dir":"Reference","previous_headings":"","what":"prepInputs — prepInputs","title":"prepInputs — prepInputs","text":"prepInputs","code":""},{"path":"https://aclason.github.io/rsortie/reference/PrepInputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepInputs — prepInputs","text":"","code":"prepInputs(fileNames, varTranslation)"},{"path":"https://aclason.github.io/rsortie/reference/PrepInputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepInputs — prepInputs","text":"fileNames text file name contains file names update updated. file must csv type varTranslation translation file recognizes behaviour parameter names base parameter file translates given names objects R ensure right parameter value updated many different types parameter values can updated. varTranslation() file essential ensure parameter name defined R environment can found base parameter file replace correct value. csv file must setup correctly following columns:#' col 1: input parameter name defined col 2: type col 3: name line replaced base parameter file col 4: group name Column 2 defines type parameter replaced valid values: 1 = basic case: variable parameter directly name 2 = basic case species: , species name 3 = behaviorlist type: basic parameter - similar 1 4 = behaviorlist type: species - similar 2 5 = output files: parameter file directory name 6 = groups species previous line, e.g. initial density","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/reference/PrepInputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"prepInputs — prepInputs","text":"","code":"prepInputs(fileNames, varTranslation) #> Error in prepInputs(fileNames, varTranslation): could not find function \"prepInputs\""},{"path":"https://aclason.github.io/rsortie/reference/ReadPlotFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Read plot file — ReadPlotFile","title":"Read plot file — ReadPlotFile","text":"ReadPlotFile() reads .output files.","code":""},{"path":"https://aclason.github.io/rsortie/reference/ReadPlotFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read plot file — ReadPlotFile","text":"","code":"ReadPlotFile(outdir)"},{"path":"https://aclason.github.io/rsortie/reference/ReadPlotFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read plot file — ReadPlotFile","text":"outdir character() Output directory","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/reference/ReadPlotFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read plot file — ReadPlotFile","text":"","code":"ReadPlotFile(outdir) #> Error in data.table(): could not find function \"data.table\""},{"path":"https://aclason.github.io/rsortie/reference/read_keyhole.html","id":null,"dir":"Reference","previous_headings":"","what":"Read keyhole — read_keyhole","title":"Read keyhole — read_keyhole","text":"read_keyhole() helper function read .kmz spatial files.","code":""},{"path":"https://aclason.github.io/rsortie/reference/read_keyhole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read keyhole — read_keyhole","text":"","code":"read_keyhole(file)"},{"path":"https://aclason.github.io/rsortie/reference/read_keyhole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read keyhole — read_keyhole","text":"file character() KMZ File","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/reference/read_keyhole.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read keyhole — read_keyhole","text":"","code":"read_keyhole(file) #> Error in basename(file): a character vector argument expected"},{"path":"https://aclason.github.io/rsortie/reference/RemoveRow.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a row — RemoveRow","title":"Remove a row — RemoveRow","text":"RemoveRow() removes row base parameter file.","code":""},{"path":"https://aclason.github.io/rsortie/reference/RemoveRow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a row — RemoveRow","text":"","code":"RemoveRow(ln1, rf)"},{"path":"https://aclason.github.io/rsortie/reference/RemoveRow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a row — RemoveRow","text":"ln1 double() Row number remove rf character() Base XML file modified","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/reference/RemoveRow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a row — RemoveRow","text":"","code":"RemoveRow(lnm,xml1) #> Error in RemoveRow(lnm, xml1): object 'xml1' not found"},{"path":"https://aclason.github.io/rsortie/reference/RemoveSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a species — RemoveSpecies","title":"Remove a species — RemoveSpecies","text":"RemoveSpecies() removes species base parameter file.","code":""},{"path":"https://aclason.github.io/rsortie/reference/RemoveSpecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a species — RemoveSpecies","text":"","code":"RemoveSpecies(sp, rf)"},{"path":"https://aclason.github.io/rsortie/reference/RemoveSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a species — RemoveSpecies","text":"sp character() Species name rf character() Base XML file modified","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/reference/RemoveSpecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a species — RemoveSpecies","text":"","code":"RemoveSpecies(sp, rf) #> Error in grep(sp, rf): object 'sp' not found"},{"path":"https://aclason.github.io/rsortie/reference/ReplaceInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace parameter values in base XML file — ReplaceInfo","title":"Replace parameter values in base XML file — ReplaceInfo","text":"ReplaceInfo() updates base parameter file new values new parameter values file.","code":""},{"path":"https://aclason.github.io/rsortie/reference/ReplaceInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace parameter values in base XML file — ReplaceInfo","text":"","code":"ReplaceInfo(rf, VariableNames, pf1, ncols, newname)"},{"path":"https://aclason.github.io/rsortie/reference/ReplaceInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace parameter values in base XML file — ReplaceInfo","text":"rf character() Base XML parameter file modified VariableNames list() Variable Names translation file pf1 character() Parameter file new values ncols double() Number columns newname character() New file name","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/reference/ReplaceInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace parameter values in base XML file — ReplaceInfo","text":"","code":"xml2 <- ReplaceInfo(xml1, VariableNames, pf1, ncols, newname) #> Error in ReplaceInfo(xml1, VariableNames, pf1, ncols, newname): object 'pf1' not found"},{"path":"https://aclason.github.io/rsortie/reference/ReplaceLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Lines — ReplaceLines","title":"Replace Lines — ReplaceLines","text":"ReplaceLines() replaces chunk parameter file different set lines. assumes new set lines complete completely replace relevant section.","code":""},{"path":"https://aclason.github.io/rsortie/reference/ReplaceLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Lines — ReplaceLines","text":"","code":"ReplaceLines(rf, pf1)"},{"path":"https://aclason.github.io/rsortie/reference/ReplaceLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Lines — ReplaceLines","text":"rf character() Base XML file modified pf1 character() Parameter file new values","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/reference/ReplaceLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Lines — ReplaceLines","text":"","code":"xml2 <- ReplaceLines(xml1, pf1) #> Error in substring(pf1[firstline], str_locate(pf1[firstline], \"<\") + 1,     str_length(pf1[firstline]) - 1): object 'pf1' not found"},{"path":"https://aclason.github.io/rsortie/reference/ReplaceParameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace a parameter — ReplaceParameter","title":"Replace a parameter — ReplaceParameter","text":"ReplaceParameter() replaces parameter base file new value.","code":""},{"path":"https://aclason.github.io/rsortie/reference/ReplaceParameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace a parameter — ReplaceParameter","text":"","code":"ReplaceParameter(ln1, rf, varvalue)"},{"path":"https://aclason.github.io/rsortie/reference/ReplaceParameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace a parameter — ReplaceParameter","text":"ln1 double() Line number parameter replace rf character() Base XML parameter file modified varvalue character() Output file name","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/reference/ReplaceParameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace a parameter — ReplaceParameter","text":"","code":"ReplaceParameter(ln1, rf, fname) #> Error in str_locate(rf[ln1], \">\"): could not find function \"str_locate\""},{"path":"https://aclason.github.io/rsortie/reference/RunSortie.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the SORTIE model — RunSortie","title":"Run the SORTIE model — RunSortie","text":"RunSortie() wrapper function passes updated parameter file C++ program SORTIE simulation.","code":""},{"path":"https://aclason.github.io/rsortie/reference/RunSortie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the SORTIE model — RunSortie","text":"","code":"RunSortie(fname, sortie_loc)"},{"path":"https://aclason.github.io/rsortie/reference/RunSortie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the SORTIE model — RunSortie","text":"fname character() File path name run sortie_loc SORTIE location '0'","code":""},{"path":[]},{"path":"https://aclason.github.io/rsortie/reference/RunSortie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the SORTIE model — RunSortie","text":"","code":"RunSortie(paste0(xmls_path,Xmls2Run[ix]),0) #> Error in paste0(xmls_path, Xmls2Run[ix]): object 'xmls_path' not found"}]
